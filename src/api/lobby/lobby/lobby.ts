/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { CreateLobby, OutError, OutLobby } from ".././models";
import { customInstance } from "../../mutator/custom-instance";
import type { ErrorType } from "../../mutator/custom-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get list of all lobbies
 * @summary Get lobby list
 */
export const getLobbyList = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutLobby[]>(
    { url: `/api/lobby/api/v1/lobby`, method: "GET", signal },
    options,
  );
};

export const getGetLobbyListQueryKey = () => {
  return [`/api/lobby/api/v1/lobby`] as const;
};

export const getGetLobbyListQueryOptions = <
  TData = Awaited<ReturnType<typeof getLobbyList>>,
  TError = ErrorType<OutError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLobbyList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLobbyListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLobbyList>>> = ({
    signal,
  }) => getLobbyList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLobbyList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetLobbyListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLobbyList>>
>;
export type GetLobbyListQueryError = ErrorType<OutError>;

export function useGetLobbyList<
  TData = Awaited<ReturnType<typeof getLobbyList>>,
  TError = ErrorType<OutError>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLobbyList>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLobbyList>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetLobbyList<
  TData = Awaited<ReturnType<typeof getLobbyList>>,
  TError = ErrorType<OutError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLobbyList>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLobbyList>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetLobbyList<
  TData = Awaited<ReturnType<typeof getLobbyList>>,
  TError = ErrorType<OutError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLobbyList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get lobby list
 */

export function useGetLobbyList<
  TData = Awaited<ReturnType<typeof getLobbyList>>,
  TError = ErrorType<OutError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLobbyList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetLobbyListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create new lobby
 * @summary Create lobby
 */
export const createLobby = (
  createLobby: CreateLobby,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutLobby>(
    {
      url: `/api/lobby/api/v1/lobby`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createLobby,
      signal,
    },
    options,
  );
};

export const getCreateLobbyMutationOptions = <
  TError = ErrorType<OutError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createLobby>>,
    TError,
    { data: CreateLobby },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createLobby>>,
  TError,
  { data: CreateLobby },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createLobby>>,
    { data: CreateLobby }
  > = (props) => {
    const { data } = props ?? {};

    return createLobby(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateLobbyMutationResult = NonNullable<
  Awaited<ReturnType<typeof createLobby>>
>;
export type CreateLobbyMutationBody = CreateLobby;
export type CreateLobbyMutationError = ErrorType<OutError>;

/**
 * @summary Create lobby
 */
export const useCreateLobby = <
  TError = ErrorType<OutError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createLobby>>,
    TError,
    { data: CreateLobby },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createLobby>>,
  TError,
  { data: CreateLobby },
  TContext
> => {
  const mutationOptions = getCreateLobbyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get lobby by ID
 * @summary Get lobby
 */
export const deleteLobby = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/lobby/api/v1/lobby/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteLobbyMutationOptions = <
  TError = ErrorType<OutError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLobby>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLobby>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLobby>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteLobby(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLobbyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLobby>>
>;

export type DeleteLobbyMutationError = ErrorType<OutError>;

/**
 * @summary Get lobby
 */
export const useDeleteLobby = <
  TError = ErrorType<OutError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLobby>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteLobby>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteLobbyMutationOptions(options);

  return useMutation(mutationOptions);
};
